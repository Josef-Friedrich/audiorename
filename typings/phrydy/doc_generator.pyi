"""
This type stub file was generated by pyright.
"""

import typing
from typing import Any, Dict, Optional
from .mediafile_extended import MediaFileExtended
from .field_docs import FieldDoc, FieldDocCollection

def remove_color(text: str) -> str:
    """https://stackoverflow.com/a/14693789/10193818"""
    ...

def get_type_name(t: typing.Any) -> str:
    ...

def print_dict_sorted(dictionary: typing.Dict[str, typing.Any], color: bool, align: typing.Literal['left', 'right'] = ...) -> None:
    ...

def print_section(text: str, color: bool = ...) -> None:
    ...

def print_debug(file_path: str, MediaClass: typing.Callable[[str], MediaFileExtended], field_generator: typing.Callable[[], typing.Generator[str, None, None]], color: bool = ...) -> None:
    ...

def merge_fields(*fields): # -> dict[Unknown, Unknown]:
    """Used in audiorename/args.py"""
    ...

def get_max_field_length(fields: Dict[str, Any]) -> int:
    """Get the length of the longest field in the dictionary ``fields``.

    :param dict fields: A dictionary to search for the longest field.
    """
    ...

FIELD_PREFIX = ...
FIELD_SUFFIX = ...
INDENT = ...
def format_field_as_txt(field_name: str, field_doc: FieldDoc, second_column: int, field_prefix: str = ...) -> str:
    ...

def format_fields_as_txt(additional_fields: Optional[FieldDocCollection] = ..., field_prefix: str = ..., color: bool = ...) -> str:
    """Return a formated string containing the documentation about the audio
    fields.
    """
    ...

FIRST_RST_CELL_PREFIX = ...
RST_CELL_PREFIX = ...
def format_field_as_rst_table(field_name: str, field_doc: FieldDoc) -> str:
    ...

def format_fields_as_rst_table(additional_fields: Optional[FieldDocCollection] = ...) -> str:
    ...

