"""
This type stub file was generated by pyright.
"""

"""This file originates from the file `beets/library.py
<https://github.com/beetbox/beets/blob/58afaf07a52df2b53bb2f8990cd06005cd063d9e/beets/library.py#L1341>`_
of the `beets project <http://beets.io>`_.
"""
class Functions:
    """A container class for the default functions provided to path
    templates. These functions are contained in an object to provide
    additional context to the functions -- specifically, the Item being
    evaluated.
    """
    _prefix = ...
    def __init__(self, values=...) -> None:
        """Parametrize the functions.
        """
        ...
    
    def functions(self): # -> dict[Unknown, Unknown]:
        """Returns a dictionary containing the functions defined in this
        object. The keys are function names (as exposed in templates)
        and the values are Python functions.
        """
        ...
    
    def tmpl_alpha(self, text): # -> str:
        """
        * synopsis: ``%alpha{text}``
        * description: This function first ASCIIfies the given text, then all \
            non alphabet characters are replaced with whitespaces.
        """
        ...
    
    def tmpl_alphanum(self, text): # -> str:
        """
        * synopsis: ``%alphanum{text}``
        * description: This function first ASCIIfies the given text, then all \
            non alpanumeric characters are replaced with whitespaces.
        """
        ...
    
    @staticmethod
    def tmpl_asciify(text): # -> str:
        """
        * synopsis: ``%asciify{text}``
        * description: Translate non-ASCII characters to their ASCII \
            equivalents. For example, “café” becomes “cafe”. Uses the mapping \
            provided by the unidecode module.
        """
        ...
    
    @staticmethod
    def tmpl_delchars(text, chars):
        """
        * synopsis: ``%delchars{text,chars}``
        * description: Delete every single character of “chars“ in “text”.
        """
        ...
    
    @staticmethod
    def tmpl_deldupchars(text, chars=...): # -> str:
        """
        * synopsis: ``%deldupchars{text,chars}``
        * description: Search for duplicate characters and replace with only \
            one occurrance of this characters.
        """
        ...
    
    @staticmethod
    def tmpl_first(text, count=..., skip=..., sep=..., join_str=...): # -> str:
        """
        * synopsis: ``%first{text}`` or ``%first{text,count,skip}`` or \
            ``%first{text,count,skip,sep,join}``
        * description: Returns the first item, separated by ; . You can use \
            %first{text,count,skip}, where count is the number of items \
            (default 1) and skip is number to skip (default 0). You can also \
            use %first{text,count,skip,sep,join} where sep is the separator, \
            like ; or / and join is the text to concatenate the items.

        :param text: the string
        :param count: The number of items included
        :param skip: The number of items skipped
        :param sep: the separator. Usually is '; ' (default) or '/ '
        :param join_str: the string which will join the items, default '; '.
        """
        ...
    
    @staticmethod
    def tmpl_if(condition, trueval, falseval=...): # -> str:
        """If ``condition`` is nonempty and nonzero, emit ``trueval``;
        otherwise, emit ``falseval`` (if provided).

        * synopsis: ``%if{condition,truetext}`` or \
            ``%if{condition,truetext,falsetext}``
        * description: If condition is nonempty (or nonzero, if it’s a \
            number), then returns the second argument. Otherwise, returns the \
            third argument if specified (or nothing if falsetext is left off).

        """
        ...
    
    def tmpl_ifdef(self, field, trueval=..., falseval=...): # -> str:
        """If field exists return trueval or the field (default) otherwise,
        emit return falseval (if provided).

        * synopsis: ``%ifdef{field}``, ``%ifdef{field,text}`` or \
            ``%ifdef{field,text,falsetext}``
        * description: If field exists, then return truetext or field \
            (default). Otherwise, returns falsetext. The field should be \
            entered without $.

        :param field: The name of the field
        :param trueval: The string if the condition is true
        :param falseval: The string if the condition is false
        :return: The string, based on condition
        """
        ...
    
    def tmpl_ifdefempty(self, field, trueval=..., falseval=...): # -> str:
        """If field exists and is emtpy return trueval
        otherwise, emit return falseval (if provided).

        * synopsis: ``%ifdefempty{field,text}`` or \
            ``%ifdefempty{field,text,falsetext}``
        * description: If field exists and is empty, then return truetext. \
            Otherwise, returns falsetext. The field should be \
            entered without $.

        :param field: The name of the field
        :param trueval: The string if the condition is true
        :param falseval: The string if the condition is false
        :return: The string, based on condition
        """
        ...
    
    def tmpl_ifdefnotempty(self, field, trueval=..., falseval=...): # -> str:
        """If field is not emtpy return trueval or the field (default)
        otherwise, emit return falseval (if provided).

        * synopsis: ``%ifdefnotempty{field,text}`` or \
            ``%ifdefnotempty{field,text,falsetext}``
        * description: If field is not empty, then return truetext. \
            Otherwise, returns falsetext. The field should be \
            entered without $.

        :param field: The name of the field
        :param trueval: The string if the condition is true
        :param falseval: The string if the condition is false
        :return: The string, based on condition
        """
        ...
    
    @staticmethod
    def tmpl_initial(text): # -> str:
        """

        * synopsis: ``%initial{text}``
        * description: Get the first character of a text in lowercase. The \
            text is converted to ASCII. All non word characters are erased.
            Only letters and numbers are preserved. If the first character is
            a number, then the result is '0'.

        :param string text: Input text to build initial from.
        :return: A single character
        """
        ...
    
    @staticmethod
    def tmpl_left(s, chars):
        """Get the leftmost characters of a string.

        * synopsis: ``%left{text,n}``
        * description: Return the first “n” characters of “text”.
        """
        ...
    
    @staticmethod
    def tmpl_lower(text):
        """Convert a string to lower case

        * synopsis: ``%lower{text}``
        * description: Convert “text” to lowercase.
        """
        ...
    
    @staticmethod
    def tmpl_nowhitespace(text, replace=...): # -> str:
        """
        * synopsis: ``%nowhitespace{text,replace}``
        * description: Replace all whitespace characters with ``replace``. \
            By default: a dash (-)
        * example: ``%nowhitespace{$track,_}``
        """
        ...
    
    @staticmethod
    def tmpl_num(number, count=...): # -> str:
        """Pad decimal number with leading zeros

        * synopsis: ``%num{number,count}``
        * description: Pad decimal number with leading zeros.
        * example: ``%num{$track,3}``
        """
        ...
    
    @staticmethod
    def tmpl_replchars(text, replace, chars):
        """
        * synopsis: ``%replchars{text,chars,replace}``
        * description: Replace the characters “chars” in “text” with \
            “replace”.
        * example: ``%replchars{text,ex,-}`` > ``t--t``
        """
        ...
    
    @staticmethod
    def tmpl_right(text, chars):
        """Get the rightmost characters of a string.

        * synopsis: ``%right{text,n}``
        * description: Return the last “n” characters of “text”.
        """
        ...
    
    @staticmethod
    def tmpl_sanitize(text):
        """
        * synopsis: ``%sanitize{text}``
        * description:  Delete in most file systems not allowed characters.
        """
        ...
    
    @staticmethod
    def tmpl_shorten(text, max_size=...): # -> str:
        """Shorten the given text to ``max_size``

        * synopsis: ``%shorten{text}`` or ``%shorten{text,max_size}``
        * example: ``%shorten{$title,32}``
        * description: Shorten “text” on word boundarys.
        """
        ...
    
    @staticmethod
    def tmpl_time(text, fmt, cur_fmt): # -> str:
        """Format a time value using `strftime`.

        * synopsis: ``%time{date_time,format,curformat}``
        * description: Return the date and time in any format accepted by \
            strftime. For example, to get the year some music was added to \
            your library, use %time{$added,%Y}.
        """
        ...
    
    @staticmethod
    def tmpl_title(text):
        """Convert a string to title case

        * synopsis: ``%title{text}``
        * description: Convert “text” to Title Case.
        """
        ...
    
    @staticmethod
    def tmpl_upper(text):
        """Covert a string to upper case

        * synopsis: ``%upper{text}``
        * description: Convert “text” to UPPERCASE.
        """
        ...
    


