"""
This type stub file was generated by pyright.
"""

def fixtag(tag, namespaces): # -> tuple[str, tuple[str, str | Unknown] | None]:
    ...

NS_MAP = ...
_log = ...
def get_error_message(error): # -> list[Unknown] | None:
    """ Given an error XML message from the webservice containing
    <error><text>x</text><text>y</text></error>, return a list
    of [x, y]"""
    ...

def make_artist_credit(artists): # -> str:
    ...

def parse_elements(valid_els, inner_els, element):
    """ Extract single level subelements from an element.
        For example, given the element:
        <element>
            <subelement>Text</subelement>
        </element>
        and a list valid_els that contains "subelement",
        return a dict {'subelement': 'Text'}

        Delegate the parsing of multi-level subelements to another function.
        For example, given the element:
        <element>
            <subelement>
                <a>Foo</a><b>Bar</b>
            </subelement>
        </element>
        and a dictionary {'subelement': parse_subelement},
        call parse_subelement(<subelement>) and
        return a dict {'subelement': <result>}
        if parse_subelement returns a tuple of the form
        (True, {'subelement-key': <result>})
        then merge the second element of the tuple into the
        result (which may have a key other than 'subelement' or
        more than 1 key)
    """
    ...

def parse_attributes(attributes, element): # -> dict[Unknown, Unknown]:
    """ Extract attributes from an element.
        For example, given the element:
        <element type="Group" />
        and a list attributes that contains "type",
        return a dict {'type': 'Group'}
    """
    ...

def parse_message(message): # -> dict[Unknown, Unknown]:
    ...

def parse_response_message(message):
    ...

def parse_collection_list(cl): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_collection(collection): # -> dict[Unknown, Unknown]:
    ...

def parse_annotation_list(al): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_annotation(annotation): # -> dict[Unknown, Unknown]:
    ...

def parse_lifespan(lifespan):
    ...

def parse_area_list(al): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_area(area): # -> dict[Unknown, Unknown]:
    ...

def parse_artist_list(al): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_artist(artist): # -> dict[Unknown, Unknown]:
    ...

def parse_coordinates(c):
    ...

def parse_place_list(pl): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_place(place): # -> dict[Unknown, Unknown]:
    ...

def parse_event_list(el): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_event(event): # -> dict[Unknown, Unknown]:
    ...

def parse_instrument(instrument): # -> dict[Unknown, Unknown]:
    ...

def parse_label_list(ll): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_label(label): # -> dict[Unknown, Unknown]:
    ...

def parse_relation_target(tgt): # -> tuple[Literal[True], dict[str, Unknown]]:
    ...

def parse_relation_list(rl): # -> tuple[Literal[True], dict[Unknown, list[dict[Unknown, Unknown]]]]:
    ...

def parse_relation(relation): # -> dict[Unknown, Unknown]:
    ...

def parse_relation_attribute_list(attributelist): # -> tuple[Literal[True], dict[str, list[Unknown]]]:
    ...

def parse_relation_attribute_element(element): # -> dict[Unknown, Unknown]:
    ...

def parse_release(release): # -> dict[Unknown, Unknown]:
    ...

def parse_medium_list(ml): # -> tuple[Literal[True], dict[str, list[Unknown]]]:
    """medium-list results from search have an additional
    <track-count> element containing the number of tracks
    over all mediums. Optionally add this"""
    ...

def parse_release_event_list(rel): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_release_event(event): # -> dict[Unknown, Unknown]:
    ...

def parse_medium(medium): # -> dict[Unknown, Unknown]:
    ...

def parse_disc_list(dl): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_text_representation(textr):
    ...

def parse_release_group(rg): # -> dict[Unknown, Unknown]:
    ...

def parse_recording(recording): # -> dict[Unknown, Unknown]:
    ...

def parse_series_list(sl): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_series(series): # -> dict[Unknown, Unknown]:
    ...

def parse_external_id_list(pl): # -> list[Unknown]:
    ...

def parse_element_list(el): # -> list[Unknown]:
    ...

def parse_work_list(wl): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_work(work): # -> dict[Unknown, Unknown]:
    ...

def parse_work_attribute_list(wal): # -> list[dict[str, Unknown]]:
    ...

def parse_work_attribute(wa): # -> dict[str, Unknown]:
    ...

def parse_url_list(ul): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_url(url): # -> dict[Unknown, Unknown]:
    ...

def parse_disc(disc): # -> dict[Unknown, Unknown]:
    ...

def parse_cdstub(cdstub): # -> dict[Unknown, Unknown]:
    ...

def parse_offset_list(ol): # -> list[int]:
    ...

def parse_instrument_list(rl): # -> list[Unknown]:
    ...

def parse_release_list(rl): # -> list[Unknown]:
    ...

def parse_release_group_list(rgl): # -> list[Unknown]:
    ...

def parse_isrc(isrc): # -> dict[Unknown, Unknown]:
    ...

def parse_recording_list(recs): # -> list[Unknown]:
    ...

def parse_artist_credit(ac): # -> list[Unknown]:
    ...

def parse_name_credit(nc): # -> dict[Unknown, Unknown]:
    ...

def parse_label_info_list(lil): # -> list[Unknown]:
    ...

def parse_label_info(li): # -> dict[Unknown, Unknown]:
    ...

def parse_track_list(tl): # -> list[Unknown]:
    ...

def parse_track(track): # -> dict[Unknown, Unknown]:
    ...

def parse_tag_list(tl): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_tag(tag): # -> dict[Unknown, Unknown]:
    ...

def parse_rating(rating): # -> dict[Unknown, Unknown]:
    ...

def parse_alias_list(al): # -> list[dict[Unknown, Unknown]]:
    ...

def parse_alias(alias): # -> dict[Unknown, Unknown]:
    ...

def parse_caa(caa_element): # -> dict[Unknown, Unknown]:
    ...

def make_barcode_request(release2barcode): # -> Any:
    ...

def make_tag_request(**kwargs): # -> Any:
    ...

def make_rating_request(**kwargs): # -> Any:
    ...

def make_isrc_request(recording2isrcs): # -> Any:
    ...

